"""The interface for classes that can
be converted to tikz code and the calls
to compile that code into a PDF and PNG"""

from abc import ABC, abstractmethod

import subprocess
import os
from typing import Optional, Sequence
from category.object import PrimitiveObject


class Latex(ABC):
    """Interface for classes that can
    be converted to tikz"""

    @abstractmethod
    def to_latex(self, x: int, y: int, context: Sequence[PrimitiveObject]) -> str:
        """Converts this class into tikz code

        Args:
            x (int): coordinate of lower left corner
            y (int): coordinate of lower left corner
            context (Sequence[PrimitiveObject]): input objects
            (strands) to this class

        Returns:
            str: tikz code
        """

    @abstractmethod
    def latex_height(self) -> int:
        """Computes and returns the
        height of this object in tikz
        cells

        Returns:
            int: tikz height
        """

    @abstractmethod
    def context_out(
        self, context: Sequence[PrimitiveObject]
    ) -> Sequence[PrimitiveObject]:
        """Given an input context, returns output context

        Args:
            context (Sequence[PrimitiveObject]): Strands coming in

        Returns:
            Sequence[PrimitiveObject]: Strands coming out
        """

    def compile_latex(
        self,
        filename: str,
        context: Optional[Sequence[PrimitiveObject]] = None,
        cleanup: bool = True,
    ) -> None:
        """Compiles the LaTeX code from to_latex, writes it to a file, and converts it to PDF
        and PNG.

        Args:
            filename (str): The name of the file to write the LaTeX code to (without extension).
        """
        if context is None:
            context = []
        # Create the figs/ directory if it doesn't exist
        figs_directory = "figs"
        os.makedirs(figs_directory, exist_ok=True)

        # Generate the LaTeX code
        latex_code = self.to_latex(0, 0, context)

        # Write the LaTeX code to a .tex file in the figs/ directory
        tex_filename = os.path.join(figs_directory, f"{filename}.tex")
        with open(tex_filename, "w", encoding="utf-8") as file:
            file.write(
                """\\documentclass{standalone}
\\usepackage{knit}
\\begin{document}
\\begin{knitdiagram}
"""
            )
            file.write(latex_code)
            file.write(
                """\\end{knitdiagram}
\\end{document}
"""
            )

        # Compile the .tex file to generate a .pdf in the figs/ directory
        try:
            subprocess.run(
                ["pdflatex", f"{filename}.tex"], check=True, cwd=figs_directory
            )
            subprocess.run(
                [
                    "convert",
                    "-density",
                    "1200",
                    f"{filename}.pdf",
                    f"png/{filename}.png",
                ],
                check=True,
                cwd=figs_directory,
            )
        finally:
            # Clean up auxiliary files generated by pdflatex in the figs/ directory
            for ext in ["aux", "log", "tex"]:
                if not cleanup and ext == "tex":
                    continue
                aux_file = os.path.join(figs_directory, f"{filename}.{ext}")
                if os.path.exists(aux_file):
                    os.remove(aux_file)

        print(f"Successfully created {os.path.join(figs_directory, f'{filename}.pdf')}")
