from abc import ABC, abstractmethod

import subprocess
import os
from category.object import PrimitiveObject

class Latex(ABC):
    @abstractmethod
    def to_latex(self, x: int, y: int, context: list[PrimitiveObject]) -> str:
        pass

    @abstractmethod
    def latex_height(self) -> int:
        pass

    @abstractmethod
    def context_out(self, context: list[PrimitiveObject]) -> list[PrimitiveObject]:
        pass

    def compile_latex(self, filename: str) -> None:
        """Compiles the LaTeX code from to_latex, writes it to a file, and converts it to PDF.

        Args:
            filename (str): The name of the file to write the LaTeX code to (without extension).
        """
        # Generate the LaTeX code
        latex_code = self.to_latex(0, 0, [])

        # Write the LaTeX code to a .tex file
        tex_filename = f"{filename}.tex"
        with open(tex_filename, 'w') as file:
            file.write("""\\documentclass{standalone}
\\usepackage{knit}
\\begin{document}
\\begin{knitdiagram}""")
            file.write(latex_code)
            file.write("""\\end{knitdiagram}
\\end{document}""")

        # Compile the .tex file to generate a .pdf
        try:
            subprocess.run(['pdflatex', tex_filename], check=True)
        except subprocess.CalledProcessError as e:
            print(f"An error occurred while compiling the LaTeX document: {e}")
        finally:
            # Clean up auxiliary files generated by pdflatex
            for ext in ['aux', 'log', 'tex']:
                aux_file = f"{filename}.{ext}"
                if os.path.exists(aux_file):
                    os.remove(aux_file)

        print(f"Successfully created {filename}.pdf")